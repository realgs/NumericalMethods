def bubb_sort(data):
    for i in range(len(data) - 1, 0, -1):
        for j in range(i):
            if data[j] > data[j + 1]:
                data[j], data[j + 1] = data[j + 1], data[j]

def insert_sort(data):
    for i in range(1,len(data)):
        insert = data[i]
        j = i - 1
        while j>=0 and data[j]>insert:
            data[j + 1] = data[j]
            j = j - 1
        data[j + 1] = insert
        
def merge_sort(data):
    if len(data)>1:
        mid = len(data)//2
        lefthalf = data[:mid]
        righthalf = data[mid:]
        merge_sort(lefthalf)
        merge_sort(righthalf)
        i=0
        j=0
        k=0
        while i < len(lefthalf) and j < len(righthalf):
            if lefthalf[i] <= righthalf[j]:
                data[k]=lefthalf[i]
                i=i+1
            else:
                data[k]=righthalf[j]
                j=j+1
            k=k+1
        while i < len(lefthalf):
            data[k]=lefthalf[i]
            i=i+1
            k=k+1
        while j < len(righthalf):
            data[k]=righthalf[j]
            j=j+1
            k=k+1
            
def counting_sort(array, place):
    size = len(array)
    output = [0] * size
    count = [0] * 10
    for i in range(0, size):
        index = array[i] // place
        count[index % 10] += 1
    for i in range(1, 10):
        count[i] += count[i - 1]
    i = size - 1
    while i >= 0:
        index = array[i] // place
        output[count[index % 10] - 1] = array[i]
        count[index % 10] -= 1
        i -= 1
    for i in range(0, size):
        array[i] = output[i]

def radix_sort(array):
    max_element = max(array)
    place = 1
    while max_element // place > 0:
        counting_sort(array, place)
        place *= 10

        
import time
data = [9, 5, 7, 6, 6, 4, 3, 8, 1, 2]
start1 = time.clock()
bubb_sort(data)
end1 = time.clock()
total1 = end1 - start1
print("{0:02f}s".format(total1))
start2 = time.clock()
insert_sort(data)
end2 = time.clock()
total2 = end2 - start2
print("{0:02f}s".format(total2))
start3 = time.clock()
merge_sort(data)
end3 = time.clock()
total3 = end3 - start3
print("{0:02f}s".format(total3))
start4 = time.clock()
radix_sort(data)
end4 = time.clock()
total4 = end4 - start4
print("{0:02f}s".format(total4))
result = [total1, total2, total3, total4]
print('the fastest is:')
if total1 == min(result):
    print('bubb_sort')
elif total2 == min(result):
    print('insert_sort')
elif total3 == min(result):
    print('merge_sort')
else: print('radix_sort')