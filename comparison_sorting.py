{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.000341s\n",
      "0.000186s\n",
      "0.000442s\n",
      "0.000309s\n",
      "the fastest is:\n",
      "insert_sort\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Lenovo\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:71: DeprecationWarning: time.clock has been deprecated in Python 3.3 and will be removed from Python 3.8: use time.perf_counter or time.process_time instead\n",
      "C:\\Users\\Lenovo\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:73: DeprecationWarning: time.clock has been deprecated in Python 3.3 and will be removed from Python 3.8: use time.perf_counter or time.process_time instead\n",
      "C:\\Users\\Lenovo\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:76: DeprecationWarning: time.clock has been deprecated in Python 3.3 and will be removed from Python 3.8: use time.perf_counter or time.process_time instead\n",
      "C:\\Users\\Lenovo\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:78: DeprecationWarning: time.clock has been deprecated in Python 3.3 and will be removed from Python 3.8: use time.perf_counter or time.process_time instead\n",
      "C:\\Users\\Lenovo\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:81: DeprecationWarning: time.clock has been deprecated in Python 3.3 and will be removed from Python 3.8: use time.perf_counter or time.process_time instead\n",
      "C:\\Users\\Lenovo\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:83: DeprecationWarning: time.clock has been deprecated in Python 3.3 and will be removed from Python 3.8: use time.perf_counter or time.process_time instead\n",
      "C:\\Users\\Lenovo\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:86: DeprecationWarning: time.clock has been deprecated in Python 3.3 and will be removed from Python 3.8: use time.perf_counter or time.process_time instead\n",
      "C:\\Users\\Lenovo\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:88: DeprecationWarning: time.clock has been deprecated in Python 3.3 and will be removed from Python 3.8: use time.perf_counter or time.process_time instead\n"
     ]
    }
   ],
   "source": [
    "def bubb_sort(data):\n",
    "    for i in range(len(data) - 1, 0, -1):\n",
    "        for j in range(i):\n",
    "            if data[j] > data[j + 1]:\n",
    "                data[j], data[j + 1] = data[j + 1], data[j]\n",
    "\n",
    "def insert_sort(data):\n",
    "    for i in range(1,len(data)):\n",
    "        insert = data[i]\n",
    "        j = i - 1\n",
    "        while j>=0 and data[j]>insert:\n",
    "            data[j + 1] = data[j]\n",
    "            j = j - 1\n",
    "        data[j + 1] = insert\n",
    "        \n",
    "def merge_sort(data):\n",
    "    if len(data)>1:\n",
    "        mid = len(data)//2\n",
    "        lefthalf = data[:mid]\n",
    "        righthalf = data[mid:]\n",
    "        merge_sort(lefthalf)\n",
    "        merge_sort(righthalf)\n",
    "        i=0\n",
    "        j=0\n",
    "        k=0\n",
    "        while i < len(lefthalf) and j < len(righthalf):\n",
    "            if lefthalf[i] <= righthalf[j]:\n",
    "                data[k]=lefthalf[i]\n",
    "                i=i+1\n",
    "            else:\n",
    "                data[k]=righthalf[j]\n",
    "                j=j+1\n",
    "            k=k+1\n",
    "        while i < len(lefthalf):\n",
    "            data[k]=lefthalf[i]\n",
    "            i=i+1\n",
    "            k=k+1\n",
    "        while j < len(righthalf):\n",
    "            data[k]=righthalf[j]\n",
    "            j=j+1\n",
    "            k=k+1\n",
    "            \n",
    "def counting_sort(array, place):\n",
    "    size = len(array)\n",
    "    output = [0] * size\n",
    "    count = [0] * 10\n",
    "    for i in range(0, size):\n",
    "        index = array[i] // place\n",
    "        count[index % 10] += 1\n",
    "    for i in range(1, 10):\n",
    "        count[i] += count[i - 1]\n",
    "    i = size - 1\n",
    "    while i >= 0:\n",
    "        index = array[i] // place\n",
    "        output[count[index % 10] - 1] = array[i]\n",
    "        count[index % 10] -= 1\n",
    "        i -= 1\n",
    "    for i in range(0, size):\n",
    "        array[i] = output[i]\n",
    "\n",
    "def radix_sort(array):\n",
    "    max_element = max(array)\n",
    "    place = 1\n",
    "    while max_element // place > 0:\n",
    "        counting_sort(array, place)\n",
    "        place *= 10\n",
    "\n",
    "        \n",
    "import time\n",
    "data = [9, 5, 7, 6, 6, 4, 3, 8, 1, 2]\n",
    "start1 = time.clock()\n",
    "bubb_sort(data)\n",
    "end1 = time.clock()\n",
    "total1 = end1 - start1\n",
    "print(\"{0:02f}s\".format(total1))\n",
    "start2 = time.clock()\n",
    "insert_sort(data)\n",
    "end2 = time.clock()\n",
    "total2 = end2 - start2\n",
    "print(\"{0:02f}s\".format(total2))\n",
    "start3 = time.clock()\n",
    "merge_sort(data)\n",
    "end3 = time.clock()\n",
    "total3 = end3 - start3\n",
    "print(\"{0:02f}s\".format(total3))\n",
    "start4 = time.clock()\n",
    "radix_sort(data)\n",
    "end4 = time.clock()\n",
    "total4 = end4 - start4\n",
    "print(\"{0:02f}s\".format(total4))\n",
    "result = [total1, total2, total3, total4]\n",
    "print('the fastest is:')\n",
    "if total1 == min(result):\n",
    "    print('bubb_sort')\n",
    "elif total2 == min(result):\n",
    "    print('insert_sort')\n",
    "elif total3 == min(result):\n",
    "    print('merge_sort')\n",
    "else: print('radix_sort')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
